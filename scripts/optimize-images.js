import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const inputDir = path.join(__dirname, '../public/assets');
const outputDir = path.join(__dirname, '../public/assets/optimized');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function optimizeImage(inputPath, outputPath, quality = 80) {
  try {
    await sharp(inputPath)
      .jpeg({ quality, progressive: true })
      .toFile(outputPath);
    
    const inputStats = fs.statSync(inputPath);
    const outputStats = fs.statSync(outputPath);
    const compressionRatio = ((inputStats.size - outputStats.size) / inputStats.size * 100).toFixed(1);
    
    console.log(`‚úÖ ${path.basename(inputPath)}: ${(inputStats.size / 1024).toFixed(1)}KB ‚Üí ${(outputStats.size / 1024).toFixed(1)}KB (—Å–∂–∞—Ç–∏–µ: ${compressionRatio}%)`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${inputPath}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WebP –≤–µ—Ä—Å–∏–∏
async function createWebP(inputPath, outputPath, quality = 80) {
  try {
    const webpPath = outputPath.replace(/\.[^.]+$/, '.webp');
    await sharp(inputPath)
      .webp({ quality })
      .toFile(webpPath);
    
    const inputStats = fs.statSync(inputPath);
    const webpStats = fs.statSync(webpPath);
    const compressionRatio = ((inputStats.size - webpStats.size) / inputStats.size * 100).toFixed(1);
    
    console.log(`‚úÖ ${path.basename(inputPath)} ‚Üí WebP: ${(webpStats.size / 1024).toFixed(1)}KB (—Å–∂–∞—Ç–∏–µ: ${compressionRatio}%)`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebP –¥–ª—è ${inputPath}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function optimizeImages() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  console.log(`üìÅ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${inputDir}`);
  console.log(`üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${outputDir}\n`);
  
  const files = fs.readdirSync(inputDir).filter(file => 
    /\.(jpg|jpeg|png)$/i.test(file) && !file.includes('optimized')
  );
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${files.length}\n`);
  
  let successCount = 0;
  let totalCount = files.length;
  
  for (const file of files) {
    const inputPath = path.join(inputDir, file);
    const outputPath = path.join(outputDir, file);
    
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${file}`);
    const success = await optimizeImage(inputPath, outputPath);
    if (success) {
      await createWebP(inputPath, outputPath);
      successCount++;
    }
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  }
  
  console.log(`\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount}/${totalCount} —Ñ–∞–π–ª–æ–≤`);
  console.log(`üìÅ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputDir}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
optimizeImages().catch(console.error);
